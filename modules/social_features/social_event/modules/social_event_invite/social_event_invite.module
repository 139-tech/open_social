<?php

/**
 * @file
 * The Social event invite enroll module.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\social_event\EventEnrollmentInterface;

/**
 * Sends email when invitation created for not registered user.
 *
 * Implements hook_ENTITY_TYPE_insert().
 */
function social_event_invite_event_enrollment_insert(EventEnrollmentInterface $eventEnrollment) {
  $messenger = \Drupal::messenger();

  $mail = $eventEnrollment->get('field_email')->getString();
  $langcode = 'en';

  $mailManager = \Drupal::service('plugin.manager.mail');
  $from = $eventEnrollment->get('user_id')->first()->get('entity')->getTarget()->getValue();
  $node = $eventEnrollment->get('field_event')->first()->get('entity')->getTarget()->getValue();

  $params = [
    'user' => $from,
    'node' => $node,
    'existing_user' => TRUE,
    'event_enrollment' => $eventEnrollment->id(),
  ];

  // Send a normal mail when the user has no account yet.
  if (empty($eventEnrollment->get('field_account')->getString())) {
    $params['existing_user'] = FALSE;
    $mailManager->mail('social_event_invite', 'invite', $mail, $langcode, $params, NULL, TRUE);
    $messenger->addMessage(t('Invite sent to %mail', ['%mail' => $mail]));
  }
  else {
    $account = \Drupal::entityTypeManager()->getStorage('user')->load($eventEnrollment->get('field_account')->getString());
    $messenger->addMessage(t('Invite sent to %user', ['%user' => $account->getEmail()]));
  }
}

/**
 * Implements hook_mail().
 *
 * This mail is sent when people who do not have an account on the website yet
 * are invited into an event. It is sent in the language the inviter was using
 * the website in.
 *
 */
function social_event_invite_mail($key, &$message, $params) {
  if ($key == 'invite') {
    $token_service = \Drupal::token();
    $language_manager = \Drupal::languageManager();

    $langcode = $message['langcode'];

    $language = $language_manager->getLanguage($langcode);
    $original_language = $language_manager->getConfigOverrideLanguage();
    $language_manager->setConfigOverrideLanguage($language);

    // Load event invite configuration
    $invite_config = \Drupal::service('config.factory')->getEditable('social_event_invite.settings');

    $invitation_subject = $invite_config->get('invite_subject');
    $invitation_body = $invite_config->get('invite_message');

    unset($params['existing_user']);

    $body = $token_service->replace($invitation_body, $params);
    $subject = $token_service->replace($invitation_subject, $params);

    $message['subject'] = $subject;
    $message['body'][] = $body;

    $language_manager->setConfigOverrideLanguage($original_language);

  }
}

/**
 * Prefill email address when user comes from social_event_invite registration url.
 *
 * Implements hook_form_FORM_ID_alter().
 */
function social_event_invite_form_user_register_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (isset($_GET["invitee_mail"])) {
    $invitee_mail = $_GET["invitee_mail"];
    $invitee_mail = base64_decode(str_replace(['-', '_'], ['+', '/'], $invitee_mail));
    if (\Drupal::service('email.validator')->isValid($invitee_mail)) {
      $form["account"]["mail"]["#default_value"] = $invitee_mail;
      $form["account"]["mail"]["#disabled"] = TRUE;
    }
  }
}


/**
 * Implements hook_views_data().
 */
function social_event_invite_views_data() {
  $data['views']['social_event_invite_recipient'] = [
    'group' => t('Event enrollment'),
    'title' => t('Recipient'),
    'help' => t('The recipient of an event invite.'),
    'field' => [
      'id' => 'social_event_invite_recipient',
    ],
  ];
  return $data;
}

/**
 * Implements template_preprocess_views_view().
 */
function social_event_invite_preprocess_views_view(&$variables) {
  if ($variables['view']->id() === 'event_manage_enrollment_invites') {
    $node_id = \Drupal::routeMatch()->getParameter('node');
    // Implement custom button to go back to the event.
    $variables['more'] = [
      '#title' => t('Back to event'),
      '#type' => 'link',
      '#url' => Url::fromRoute('entity.node.canonical', ['node' => (int) $node_id]),
      '#attributes' => [
        'class' => [
          'btn',
          'btn-default',
          'btn-lg',
          'btn-raised',
          'waves-effect',
        ],
      ],
    ];
  }
  // We have to override the local actions block.
  // and render our own block instance in the view for placement.
  // hook_theme_registry_alter will ensure our hooks is invoked later.
  // That is also why hook_menu_local_actions_alter won't work.
  if ($variables['view']->id() === 'event_manage_enrollments') {
    $entity = \Drupal::entityTypeManager()->getStorage('block')
      ->load('socialeventinviteblock');

    if (NULL !== $entity) {
      $block_content = \Drupal::entityTypeManager()
        ->getViewBuilder('block')
        ->view($entity);

      if (!empty($block_content)) {
        $variables['header']['actions'] = $block_content;
      }
    }
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function social_event_invite_theme_registry_alter(&$theme_registry) {
  // Unfortunately the preprocess functions aren't ordered by module weight.
  // Changing module weight doesn't work, also with dependency set to
  // social_group this should be dealt with but isnt.
  // So we enforce our preprocess after social_group.
  if (!empty($theme_registry['views_view']['preprocess functions'])) {
    $current_key = array_search('social_event_invite_preprocess_views_view', $theme_registry['views_view']['preprocess functions'], FALSE);
    unset($theme_registry['views_view']['preprocess functions'][$current_key]);
    // Give it a new key all the way at the end.
    $theme_registry['views_view']['preprocess functions'][] = 'social_event_invite_preprocess_views_view';
  }
}

/**
 * Override variables for the social page hero data.
 */
function social_event_invite_preprocess_node(array &$variables) {
  if (!empty($variables['event_enrollment'])) {
    $node = $variables['node'];

    if ($variables['view_mode'] === 'hero') {
      $form = \Drupal::formBuilder()
        ->getForm('Drupal\social_event_invite\Form\EventInviteEnrollActionForm', $node);

      $variables['event_enrollment'] = [
        'enroll_action_form' => $form,
      ];
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function social_event_invite_user_insert(EntityInterface $entity) {
  // @todo: implement a better, more specific way to invalidate cache.
  // - config:field.storage.event_enrollment.field_request_or_invite_status.
  // - config:views.view.event_manage_enrollment_invites.
  // - event_enrollment_list.
  // - user_list.
  // - profile_list.
  // - profile_view.
  // - event_enrollment:ID.
  $tags = [
    'config:field.storage.event_enrollment.field_request_or_invite_status',
    'config:views.view.event_manage_enrollment_invites',
  ];
  Cache::invalidateTags($tags);
}

/**
 * Implements hook_entity_operation_alter().
 */
function social_event_invite_entity_operation_alter(array &$operations, EntityInterface $entity) {
  // Check access first.
  if (!social_event_owner_or_organizer()) {
    return;
  }
  // Get the node, so we can pass it as a parameter.
  $node = \Drupal::routeMatch()->getParameter('node');
  // Check if the entity type is one of event_enrollment and that we're on the
  // correct view. Otherwise it would update all actions across the platform.
  if ($entity->getEntityTypeId() === 'event_enrollment' && \Drupal::routeMatch()->getRouteName() === 'view.event_manage_enrollment_invites.page_manage_enrollment_invites') {
    // Empty the current operations.
    $operations = [];
    // Add the "Cancel invite" option.
    $operations['approve']['title'] = t('Cancel invite');
    $operations['approve']['url'] = Url::fromRoute('<front>', []);
  }
}
