<?php

/**
 * @file
 * Install, update and uninstall functions for the social_content_block module.
 */

use Drupal\Core\Config\FileStorage;
use Drupal\Core\Config\InstallStorage;

/**
 * Add fields for plugin ID and plugin fields to the block content form.
 */
function social_content_block_update_8001(&$sandbox) {
  if (!isset($sandbox['total'])) {
    $sandbox['configs'] = [
      'field.storage.block_content.field_plugin_id',
      'field.storage.block_content.field_plugin_field',
      'field.field.block_content.custom_content_list.field_sorting',
      'field.field.block_content.custom_content_list.field_plugin_id',
      'field.field.block_content.custom_content_list.field_plugin_field',
      'core.entity_form_display.block_content.custom_content_list.default',
      'core.entity_view_display.block_content.custom_content_list.default',
    ];

    $sandbox['total'] = count($sandbox['configs']);
    $sandbox['current'] = 0;
    $sandbox['path'] = drupal_get_path('module', 'social_content_block') . '/' . InstallStorage::CONFIG_INSTALL_DIRECTORY;
  }

  $source = new FileStorage($sandbox['path']);
  $config_storage = \Drupal::service('config.storage');
  $config = $sandbox['configs'][$sandbox['current']++];
  $config_storage->write($config, $source->read($config));

  $sandbox['#finished'] = $sandbox['current'] / $sandbox['total'];
}

/**
 * Fill in fields for plugin ID and plugin fields in existing blocks.
 */
function social_content_block_update_8002(&$sandbox) {
  if (!isset($sandbox['total'])) {
    $sandbox['total'] = \Drupal::entityQuery('block_content')
      ->condition('type', 'custom_content_list')
      ->count()
      ->execute();

    if (!$sandbox['total']) {
      return;
    }

    $sandbox['entity_id'] = $sandbox['processed'] = 0;
    $sandbox['plugin_id'] = 'topic_content_block';

    /** @var \Drupal\social_content_block\ContentBlockManagerInterface $content_block_manager */
    $content_block_manager = \Drupal::service('plugin.manager.content_block');

    $definition = $content_block_manager->getDefinition($sandbox['plugin_id']);
    $sandbox['fields'] = $definition['fields'];
  }

  $ids = \Drupal::entityQuery('block_content')
    ->condition('type', 'custom_content_list')
    ->condition('id', $sandbox['entity_id'], '>')
    ->sort('id')
    ->range(0, 1)
    ->execute();

  $sandbox['entity_id'] = reset($ids);

  /** @var \Drupal\block_content\BlockContentInterface $entity */
  $entity = \Drupal::entityTypeManager()->getStorage('block_content')
    ->load($sandbox['entity_id']);

  $entity->field_plugin_id->value = $sandbox['plugin_id'];

  $fields = [];

  foreach ($sandbox['fields'] as $field) {
    if (!$entity->get($field)->isEmpty()) {
      $fields[] = $field;
    }
  }

  if (count($fields) === 1) {
    $entity->field_plugin_field->value = reset($fields);
  }

  $entity->save();

  $sandbox['processed']++;

  $sandbox['#finished'] = $sandbox['processed'] / $sandbox['total'];
}
