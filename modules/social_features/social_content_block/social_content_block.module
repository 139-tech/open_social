<?php

/**
 * @file
 * The Social Content Block module.
 */

use Drupal\block_content\BlockContentInterface;
use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;

/**
 * Implements hook_preprocess_block().
 */
function social_content_block_preprocess_block(&$variables) {
  if ($variables['base_plugin_id'] === 'block_content' &&
    isset($variables['content']['#block_content']) &&
    $variables['content']['#block_content']->bundle() === 'custom_content_list'
  ) {
    $variables['content']['social_content_block'] = $variables['elements']['social_content_block'];
    $variables['card'] = TRUE;
  }
}

/**
 * Implements hook_block_view_BASE_BLOCK_ID_alter().
 */
function social_content_block_block_view_block_content_alter(&$build, BlockPluginInterface $block) {
  // Implements lazy loading for the content block through normal placement.
  $uuid = $block->getDerivativeId();
  /** @var \Drupal\block_content\BlockContentInterface $block_entity */
  $block_entity = \Drupal::service('entity.repository')
    ->loadEntityByUuid('block_content', $uuid);
  if ($block_entity->bundle() !== 'custom_content_list') {
    return;
  }
  if (!$block_entity->field_subtitle->isEmpty()) {
    $build['subtitle'] = $block_entity->field_subtitle->view(['label' => 'hidden']);
  }
  // The build argument order is relied upon by socialbase
  // ThemeSuggestionsAlter.
  $build['social_content_block'] = [
    '#lazy_builder' => [
      'social_content_block.content_builder:build',
      [
        $block_entity->id(),
        $block_entity->getEntityTypeId(),
        $block_entity->bundle(),
      ],
    ],
    '#create_placeholder' => TRUE,
  ];
}

/**
 * Implements hook_block_view_BASE_BLOCK_ID_alter().
 */
function social_content_block_block_view_inline_block_alter(&$build, BlockPluginInterface $block) {
  // Implements lazy loading for the content block in layout builder.
  $block_entity = $build['content']['#block_content'];
  if (!$block_entity instanceof BlockContentInterface || $block_entity->bundle() !== 'custom_content_list') {
    return;
  }
  $build['content_type'] = ['#plain_text' => _social_content_block_get_content_type_for_block($block_entity)];
  if (!$block_entity->field_subtitle->isEmpty()) {
    $build['subtitle'] = $block_entity->field_subtitle->view(['label' => 'hidden']);
  }
  // The build argument order is relied upon by socialbase
  // ThemeSuggestionsAlter.
  $build['content'] = [
    '#lazy_builder' => [
      'social_content_block.content_builder:build',
      [
        $block_entity->id(),
        $block_entity->getEntityTypeId(),
        $block_entity->bundle(),
      ],
    ],
    '#create_placeholder' => TRUE,
  ];
}

/**
 * Get content type for the block.
 *
 * @param \Drupal\block_content\BlockContentInterface $block_entity
 *   The block content entity object.
 *
 * @return string
 *   The entity type.
 */
function _social_content_block_get_content_type_for_block(BlockContentInterface $block_entity) {
  if ($block_entity->field_plugin_id->isEmpty()) {
    return '';
  }
  $plugin_id = $block_entity->field_plugin_id->value;
  $definition = \Drupal::service('plugin.manager.content_block')->getDefinition($plugin_id);

  // For nodes we distinguish bundles, otherwise we only show the entity type.
  if ($definition['entityTypeId'] === 'node') {
    return $definition['bundle'];
  }

  return $definition['entity_type'];
}

/**
 * Implements hook_form_alter().
 */
function social_content_block_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form_ids = [
    'block_content_custom_content_list_form',
    'block_content_custom_content_list_edit_form',
  ];

  if (!in_array($form_id, $form_ids)) {
    return;
  }

  /** @var \Drupal\social_content_block\ContentBlockManagerInterface $content_block_manager */
  $content_block_manager = \Drupal::service('plugin.manager.content_block');

  foreach ($content_block_manager->getDefinitions() as $plugin_id => $plugin_definition) {
    $fields = &$form['field_plugin_field']['widget'][0][$plugin_id]['#options'];

    foreach ($fields as $field_name => $field_title) {
      if ($field_name === $field_title) {
        $fields[$field_name] = $form[$field_name]['widget']['target_id']['#title'];

        $form[$field_name]['#states'] = [
          'visible' => [
            ':input[name="field_plugin_id[0][value]"]' => [
              'value' => $plugin_id,
            ],
            ':input[name="field_plugin_field[0][' . $plugin_id . ']"]' => [
              ['value' => 'all'],
              ['value' => $field_name],
            ],
          ],
        ];
      }
    }
  }

  $form['#attributes']['class'][] = 'form--default';
  $form['field_sorting']['widget']['#description_display'] = 'before';

  foreach (Element::children($form['actions']) as $key) {
    if ($key !== 'submit') {
      $form['actions'][$key]['#attributes']['class'][] = 'btn';
      $form['actions'][$key]['#attributes']['class'][] = 'btn-flat';
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function social_content_block_form_block_content_custom_content_list_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add submit handler to clear cache.
  foreach (array_keys($form['actions']) as $action) {
    if ($action !== 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
      $form['actions'][$action]['#submit'][] = 'custom_content_block_form_submit';
    }
  }
}

/**
 * Custom submit handler.
 */
function custom_content_block_form_submit($form, FormStateInterface $form_state) {
  // Clear plugin cache.
  \Drupal::service('plugin.cache_clearer')->clearCachedDefinitions();
}
