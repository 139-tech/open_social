<?php

/**
 * @file
 * Module file for Social Comment Upload.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\file\Entity\File;
use Drupal\Core\Render\Element;

//
//function social_comment_upload_theme() {
//  return [
//    // From file.field.inc.
//    'file_image_widget_multiple' => [
//      'render element' => 'element',
//      'file' => 'file.field.inc',
//    ],
//  ];
//}

/**
 * Prepares variables for multi file and image form widget templates.
 *
 * Default template: file-widget-multiple.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: A render element representing the widgets.
 */
function template_preprocess_file_image_widget_multiple(&$variables) {
  $element = $variables['element'];

  // Special ID and classes for draggable tables.
  $weight_class = $element['#id'] . '-weight';
  $table_id = $element['#id'] . '-table';

  // Build up a table of applicable fields.
  $headers = [];
  $headers[] = t('File information');
  if ($element['#display_field']) {
    $headers[] = [
      'data' => t('Display'),
      'class' => ['checkbox'],
    ];
  }
  $headers[] = t('Weight');
  $headers[] = t('Operations');

  // Get our list of widgets in order (needed when the form comes back after
  // preview or failed validation).
  $widgets = [];
  foreach (Element::children($element) as $key) {
    $widgets[] = &$element[$key];
  }
  usort($widgets, '_field_multiple_value_form_sort_helper');

  $rows = [];
  foreach ($widgets as $key => &$widget) {
    // Save the uploading row for last.
    if (empty($widget['#files'])) {
      $widget['#title'] = $element['#file_upload_title'];
      $widget['#description'] = \Drupal::service('renderer')->renderPlain($element['#file_upload_description']);
      continue;
    }

    // Delay rendering of the buttons, so that they can be rendered later in the
    // "operations" column.
    $operations_elements = [];
    foreach (Element::children($widget) as $sub_key) {
      if (isset($widget[$sub_key]['#type']) && $widget[$sub_key]['#type'] == 'submit') {
        hide($widget[$sub_key]);
        $operations_elements[] = &$widget[$sub_key];
      }
    }

    // Delay rendering of the "Display" option and the weight selector, so that
    // each can be rendered later in its own column.
    if ($element['#display_field']) {
      hide($widget['display']);
    }
    hide($widget['_weight']);

    // Render everything else together in a column, without the normal wrappers.
    $widget['#theme_wrappers'] = [];
    $information = \Drupal::service('renderer')->render($widget);
    $display = '';
    if ($element['#display_field']) {
      unset($widget['display']['#title']);
      $display = [
        'data' => render($widget['display']),
        'class' => ['checkbox'],
      ];
    }
    $widget['_weight']['#attributes']['class'] = [$weight_class];
    $weight = render($widget['_weight']);

    // Arrange the row with all of the rendered columns.
    $row = [];
    $row[] = $information;
    if ($element['#display_field']) {
      $row[] = $display;
    }
    $row[] = $weight;

    // Show the buttons that had previously been marked as hidden in this
    // preprocess function. We use show() to undo the earlier hide().
    foreach (Element::children($operations_elements) as $key) {
      show($operations_elements[$key]);
    }
    $row[] = [
      'data' => $operations_elements,
    ];
    $rows[] = [
      'data' => $row,
      'class' => isset($widget['#attributes']['class']) ? array_merge($widget['#attributes']['class'], ['draggable']) : ['draggable'],
    ];
  }

  $variables['table'] = [
    '#type' => 'table',
    '#header' => $headers,
    '#rows' => $rows,
    '#attributes' => [
      'id' => $table_id,
    ],
    '#tabledrag' => [
      [
        'action' => 'order',
        'relationship' => 'sibling',
        'group' => $weight_class,
      ],
    ],
    '#access' => !empty($rows),
  ];

  $variables['element'] = $element;
}


/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter the weight of the actions, so the upload is last.
 */
function social_comment_upload_form_comment_comment_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // If we don't have a file upload field there's nothing to change.
  if (!isset($form['field_comment_files'])) {
    return;
  }

//  $form['field_comment_files']['#theme'] = 'file_image_widget_multiple';

  if (social_comment_upload_is_enabled()) {
    $form['field_comment_files']['widget']['#file_upload_title'] = '';
    $form['#attached']['library'][] = 'social_comment_upload/comment_upload';
    $form['#after_build'][] = 'social_comment_upload_form_comment_comment_form_after_build';
    // Workaround for fixing behat tests,
    // which is caused by alter in social_comment module.
    $form['field_comment_files']['#weight'] = 9;
    $form['actions']['#weight'] = 8;
  }
  else {
    // Turn it off.
    $form['field_comment_files']['#access'] = FALSE;
  }
}

/**
 * Removes the select list with "weight" value.
 */
function social_comment_upload_form_comment_comment_form_after_build($form, FormStateInterface $form_state) {
  foreach ($form['field_comment_files']['widget'] as &$element) {
    if (is_array($element) && isset($element['_weight'])) {
      unset($element['_weight']);
    }
  }

  return $form;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function social_comment_upload_preprocess_file_widget_multiple(&$variables) {
  if (social_comment_upload_is_enabled()) {
    $element = $variables['element'];

    if ($element['#field_name'] == 'field_comment_files') {
      // Remove "weight" column.
      foreach ($variables['table']['#rows'] as $key => $row) {
        if (!empty($element['#display_field'])) {
          unset($variables['table']['#rows'][$key]['data'][2]);
        }
        else {
          unset($variables['table']['#rows'][$key]['data'][1]);
        }
      }

      // Remove headers and disable sorting rows.
      $variables['table']['#header'] = [];
      $variables['table']['#tabledrag'] = [];
    }
  }
}

/**
 * Implements hook_comment_delete().
 */
function social_comment_upload_comment_delete(EntityInterface $entity) {
  // If this comment has any files, delete those as well.
  _social_comment_upload_delete_comment_files($entity);
}

/**
 * Deletes the files associated with a comment.
 *
 * This can be used to clean up files that were uploaded with a comment once
 * that comment is being removed.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The comment for which attached files should be deleted.
 */
function _social_comment_upload_delete_comment_files(EntityInterface $entity) {
  // If this comment doesn't have any attached files we abort early.
  if (!$entity->hasField('field_comment_files') || $entity->get('field_comment_files')->isEmpty()) {
    return;
  }

  foreach ($entity->field_comment_files as $file_reference) {
    // Try to load the actual file object.
    $file = File::load($file_reference->target_id);
    // Check if it's an actual file object.
    if ($file instanceof File) {
      // Delete the file object.
      $file->delete();
    }
  }
}

/**
 * A shortcut function for the allow_upload_comments setting.
 *
 * @return bool
 *   Whether attachment uploading for comments is enabled.
 */
function social_comment_upload_is_enabled() {
  return \Drupal::config('social_comment_upload.settings')
    ->get('allow_upload_comments');
}
