<?php

/**
 * @file
 * The Social Path Manager module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\group\Entity\GroupType;

/**
 * Implements hook_form_alter().
 */
function social_path_manager_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $social_group_types = _social_path_manager_group_types();

  $group_forms = [];

  foreach ($social_group_types as $social_group_type) {
    $group_forms['edit'][] = "group_{$social_group_type}_edit_form";
    $group_forms['add'][] = "group_{$social_group_type}_add_form";
  }

  if (in_array($form_id, $group_forms['add']) || in_array($form_id, $group_forms['edit'])) {
    $form['path']['#type'] = 'fieldset';
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function social_path_manager_module_implements_alter(&$implementations, $hook) {
  if ($hook === 'form_alter') {
    $group = $implementations['social_path_manager'];
    unset($implementations['social_path_manager']);
    $implementations['social_path_manager'] = $group;
  }
}

/**
 * Implements hook_entity_insert().
 */
function social_path_manager_entity_insert(EntityInterface $entity) {
  _social_path_manager_update_alias($entity, 'insert');
}

/**
 * Implements hook_entity_update().
 */
function social_path_manager_entity_update(EntityInterface $entity) {
  _social_path_manager_update_alias($entity, 'update');
}

/**
 * Get a full list of group types.
 *
 * @return array
 *   List of group types.
 */
function _social_path_manager_group_types() {
  $types = &drupal_static(__FUNCTION__);
  if (!isset($types)) {
    $types = [];
    /** @var \Drupal\group\Entity\GroupType $group_type */
    foreach (GroupType::loadMultiple() as $group_type) {
      $types[] = $group_type->id();
    }
  }

  // Allow other modules to change the group types.
  \Drupal::moduleHandler()->alter('social_path_manager_group_types', $types);

  return $types;
}

/**
 * Get a list of tabs used in groups.
 *
 * @return array
 *   Array of group tabs.
 */
function _social_path_manager_group_tabs() {
  $tabs = &drupal_static(__FUNCTION__);
  if (!isset($tabs)) {
    /** @var \Drupal\Core\Menu\LocalTaskManager $taskManager */
    $taskManager = Drupal::service('plugin.manager.menu.local_task');
    $tabs = [];

    $group_tabs = $taskManager->getLocalTasksForRoute('entity.group.canonical');
    $group_tabs = $group_tabs[0];

    // Loop over the available tabs on a group.
    foreach ($group_tabs as $key => $localtask) {
      $tabs[$key] = $localtask->getRouteName();
    }
    // Allow other modules to change the group tabs.
    \Drupal::moduleHandler()->alter('social_path_manager_group_tabs', $tabs);
  }
  return $tabs;
}

/**
 * Implements hook_social_path_manager_group_tabs_alter().
 */
function social_path_manager_social_path_manager_group_tabs_alter(array &$tabs) {
  foreach ($tabs as $key => $route) {
    // Only allow tabs that are part of the group.
    if ($key == 'social_group.stream' || strpos($key, 'social_group') === FALSE) {
      unset($tabs[$key]);
    }
  }
}

/**
 * Get the url suffix for a giving route of a group.
 *
 * @param int $group_id
 *   The ID of the group being updated.
 * @param string $route
 *   The route of the tab being updated.
 *
 * @return string
 *   The url suffix of the tab.
 */
function _social_path_manager_get_path_suffix($group_id, $route) {
  $url = Url::fromRoute($route, ['group' => $group_id]);

  // Get the last part of the url.
  $url = explode('/', $url->getInternalPath());

  // Add the route and url to the array.
  $suffix = end($url);

  return $suffix;
}

/**
 * Create the aliases for the views of the group.
 *
 * @param \Drupal\Core\Entity\EntityInterface|object $entity
 *   The entity that is the parent for the alias.
 * @param string $op
 *   The operation that is being performed.
 */
function _social_path_manager_update_alias(EntityInterface $entity, $op) {
  if ($entity->getEntityTypeId() === 'group') {
    // New alias.
    $path = \Drupal::service('pathauto.generator')
      ->updateEntityAlias($entity, 'update');

    // Check if the alias changed.
    // If yes, then change all the other views.
    if (!empty($path)) {
      foreach (_social_path_manager_group_tabs() as $route) {
        $suffix = _social_path_manager_get_path_suffix($entity->id(), $route);
        // Insert the alias for the other views.
        \Drupal::service('path.alias_storage')
          ->save('/group/' . $entity->id() . '/' . $suffix, $path['alias'] . '/' . $suffix, 'en');
      }
      /** @var \Drupal\Core\Cache\CacheTagsInvalidator $cti */
      $cti = \Drupal::service('cache_tags.invalidator');
      $cti->invalidateTags(['group:' . $entity->id()]);
    }
  }
}
