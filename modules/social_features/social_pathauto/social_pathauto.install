<?php

/**
 * @file
 * Install, update, and uninstall functions for Social Pathauto.
 */

use Drupal\pathauto\Entity\PathautoPattern;

/**
 * Install
 * Prepare and create all the patterns for the content types and group
 */
function social_pathauto_install() {

  $content_types = ['event', 'topic', 'page'];

  // Create pattern for each content type
  foreach ($content_types as $content_type) {
    $pattern = PathautoPattern::create([
      'id' => $content_type . "_alias",
      'label' => $content_type . " alias",
      'type' => "canonical_entities:node",
      'pattern' => "/" . $content_type . "/[node:title]",
      'selection_criteria' => [
        [
          'id' => 'node_type',
          'bundles' => [
            $content_type => $content_type
          ],
          "negate" => false,
        ]
      ],
    ]);

    // Save the patterns
    $pattern->save();
  }

  // Create pattern for Group
  $pattern = PathautoPattern::create([
    'id' => "open_group_alias",
    'label' => "group alias",
    'type' => "canonical_entities:group",
    'pattern' => "/group/[group:title]/stream",
    'selection_criteria' => [
      [
        'id' => 'entity_bundle:group',
        'bundles' => [
          'open_group' => 'open_group'
        ],
        "negate" => false,
      ]
    ],
  ]);

  // Save the pattern
  $pattern->save();


  // TODO: put this in a update hook?
  foreach ($content_types as $content_type) {

    $query_node_types = \Drupal::entityQuery('node')
      ->condition('type', $content_type)
      ->execute();
    $nodes = \Drupal::service('entity.manager')
      ->getStorage('node')
      ->loadMultiple($query_node_types);

    foreach ($nodes as $node) {
      \Drupal::service('pathauto.generator')
        // NOTE: 'insert' CREATES new aliases
        // even if there are already aliases set.
        ->updateEntityAlias($node, 'update');
    }
  }
}

///**
// * Update all nodes with aliases
// */
//function social_pathauto_update_8001() {
//  $content_types = ['event', 'topic'];
//
//  foreach ($content_types as $content_type) {
//
//    $query_node_types = \Drupal::entityQuery('node')
//      ->condition('type', $content_type)
//      ->execute();
//    $nodes = \Drupal::service('entity.manager')
//      ->getStorage('node')
//      ->loadMultiple($query_node_types);
//
//    foreach ($nodes as $node) {
//      \Drupal::service('pathauto.generator')
//        // NOTE: 'insert' CREATES new aliases
//        // even if there are already aliases set.
//        ->updateEntityAlias($node, 'update');
//    }
//  }
//}
