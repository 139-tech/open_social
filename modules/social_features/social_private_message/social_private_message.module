<?php

/**
 * @file
 * The Social Privagte Message module.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\user\Entity\User;


/**
 * Implements hook_element_info_alter().
 */
function social_private_message_element_info_alter(array &$info) {
  if (isset($info['text_format']['#process'])) {
    $info['text_format']['#process'][] = 'social_private_message_filter_process_format';
  }
}

/**
 * Implements hook_form_FORMID_alter().
 */
function social_private_message_form_private_message_add_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['actions']['submit']['#value'] = t('Next');
  $form['actions']['submit']['#submit'][] = 'social_private_message_redirect';
}

/**
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * Redirects the form to the inbox
 */
function social_private_message_redirect($form, FormStateInterface $form_state) {
  // Force redirect to the inbox.
  $url = Url::fromRoute('social_private_message.inbox');
  $form_state->setRedirectUrl($url);
}

/**
 * Implements hook_filter_format_disable().
 */
function social_private_message_filter_process_format($element) {
  // Only supported format is plain text.
  $element['#format'] = 'plain_text';
  $element['format']['format']['#access'] = FALSE;
  $element['format']['format']['#value'] = 'plain_text';
  $element['format']['help']['#access'] = FALSE;
  $element['format']['format']['#options'] = ['plain_text' => 'Plain Text'];

  return $element;
}


/**
 * Implements hook_js_alter().
 */
function social_private_message_js_alter(&$javascript, \Drupal\Core\Asset\AttachedAssetsInterface $assets) {
  // Remove Js coming from the private_message module.
  if (isset($javascript['modules/contrib/private_message/js/private_message_inbox_block.js'])) {
    unset($javascript['modules/contrib/private_message/js/private_message_inbox_block.js']);
  }
}

/**
 * Implements hook_entity_view_alter().
 */
function social_private_message_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  // Threads.
  if ($entity->getEntityTypeId() === 'private_message_thread') {

    /* @var \Drupal\private_message\Entity\PrivateMessageThread $thread */
    $thread = $entity;
    $members = $thread->getMembers();
    $members_string = [];

    // Remove myself from the array.
    /* @var Drupal\user\Entity\User $member */
    foreach ($members as $key => $member) {
      if (Drupal::currentUser()->id() === $member->id()) {
        unset($members[$key]);
      }
      else {
        $members_string[]= $member->getDisplayName();
      }
    }
    // Count the amount of members.
    $member_count = count($members);

    $profile_picture = [];

    if ($member_count === 1) {
      $recipient = end($members);
      // Load compact notification view mode of the attached profile.
      if ($recipient instanceof User) {
        $storage = \Drupal::entityTypeManager()->getStorage('profile');
        if (!empty($storage)) {
          $user_profile = $storage->loadByUser($recipient, 'profile');
          if ($user_profile) {
            $content = \Drupal::entityTypeManager()
              ->getViewBuilder('profile')
              ->view($user_profile, 'compact_private_message');
            // Add to a new field, so twig can render it.
            $profile_picture = $content;
          }
        }
      }
    }
    // Add either the profile picture or the group picture.
    if ($member_count > 1) {
      $build['members']['#markup'] = '<span class="group-icon"></span>' . implode(', ', $members_string);
    }
    else {
      $build['members'] = $profile_picture;
      $build['members']['#prefix'] = '<div class="media-left avatar">';
      $build['members']['#suffix'] = '</div>';

    }
    // Add classes so the thread shows up in a card.
    $classes = [
      'private-message-thread-inbox',
      'private-message-thread',
      'card'
    ];
    // Overwrite the prefix/suffix from the view builder.
    $build['#prefix'] = '<div id="private-message-thread-' . $thread->id() . '" class="' . implode(' ', $classes) . '" data-thread-id="' . $thread->id() . '" data-last-update="' . $thread->get('updated')->value . '"><div class="card__block"><div class="media-wrapper"><div class="media">';
    $build['#suffix'] = '</div></div></div></div>';
  }

}
