<?php

/**
 * @file
 * The Social Privagte Message module.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\user\Entity\User;


/**
 * Implements hook_element_info_alter().
 */
function social_private_message_element_info_alter(array &$info) {
  if (isset($info['text_format']['#process'])) {
    $info['text_format']['#process'][] = 'social_private_message_filter_process_format';
  }
}

/**
 * Implements hook_form_FORMID_alter().
 */
function social_private_message_form_private_message_add_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['actions']['submit']['#value'] = t('Next');
  $form['actions']['submit']['#submit'][] = 'social_private_message_redirect';

  // Determine if the form is an PMT edit form.
  $form_is_edit_form = !is_null($form_state->get('thread_members'));
  // Add form class based on form type (create/edit).
  $form_class = 'message__thread_edit';
  if ($form_is_edit_form) {
    $form_class = 'message__thread_create';
  }
  $form['#attributes']['class'][] = $form_class;

  if ($form_is_edit_form) {
    // Add the profile image if the current user.
    $account = User::load(Drupal::currentUser()->id());
    // Load compact notification view mode of the attached profile.
    if ($account) {
      $storage = \Drupal::entityTypeManager()->getStorage('profile');
      if (!empty($storage)) {
        $user_profile = $storage->loadByUser($account, 'profile');
        if ($user_profile) {
          $content = \Drupal::entityTypeManager()
            ->getViewBuilder('profile')
            ->view($user_profile, 'compact_notification');
          // Add to a new field, so twig can render it.
          $form['current_user_image'] = $content;
        }
      }
    }
  }
}

/**
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * Redirects the form to the inbox
 */
function social_private_message_redirect($form, FormStateInterface $form_state) {
  // Force redirect to the inbox.
  $url = Url::fromRoute('social_private_message.inbox');
  $form_state->setRedirectUrl($url);
}

/**
 * Implements hook_filter_format_disable().
 */
function social_private_message_filter_process_format($element) {
  // Only supported format is plain text.
  $element['#format'] = 'plain_text';
  $element['format']['format']['#access'] = FALSE;
  $element['format']['format']['#value'] = 'plain_text';
  $element['format']['help']['#access'] = FALSE;
  $element['format']['format']['#options'] = ['plain_text' => 'Plain Text'];

  return $element;
}


/**
 * Implements hook_js_alter().
 */
function social_private_message_js_alter(&$javascript, \Drupal\Core\Asset\AttachedAssetsInterface $assets) {
  // Remove Js coming from the private_message module.
  if (isset($javascript['modules/contrib/private_message/js/private_message_inbox_block.js'])) {
    unset($javascript['modules/contrib/private_message/js/private_message_inbox_block.js']);
  }
}

/**
 * Implements hook_entity_view_alter().
 */
function social_private_message_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  // Threads.
  if ($entity->getEntityTypeId() === 'private_message_thread') {
    // View mode inbox.
    if ($build['#view_mode'] === 'inbox') {
      /* @var \Drupal\private_message\Entity\PrivateMessageThread $thread */
      $thread = $entity;
      $members = $thread->getMembers();
      $members_string = [];
      $display_name = '';

      // Remove myself from the array.
      /* @var Drupal\user\Entity\User $member */
      foreach ($members as $key => $member) {
        if (Drupal::currentUser()->id() === $member->id()) {
          unset($members[$key]);
        }
        else {
          $members_string[]= $member->getDisplayName();
        }
      }
      // Count the amount of members.
      $member_count = count($members);

      $profile_picture = [];

      if ($member_count === 1) {
        $recipient = end($members);
        // Load compact notification view mode of the attached profile.
        if ($recipient instanceof User) {
          $display_name = $recipient->getDisplayName();
          $storage = \Drupal::entityTypeManager()->getStorage('profile');
          if (!empty($storage)) {
            $user_profile = $storage->loadByUser($recipient, 'profile');
            if ($user_profile) {
              $content = \Drupal::entityTypeManager()
                ->getViewBuilder('profile')
                ->view($user_profile, 'compact_notification');
              // Add to a new field, so twig can render it.
              $profile_picture = $content;
            }
          }
        }
      }
      // Add either the profile picture or the group picture.
      if ($member_count > 1) {
        $build['members']['#markup'] = '<span class="group-icon"></span>';
        // Add members names.
        $build['membernames']['#markup'] = implode(', ', $members_string);
        $build['membernames']['#prefix'] = '<strong>';
        $build['membernames']['#suffix'] = '</strong>';
      }
      else {
        $build['members'] = $profile_picture;
        $build['members']['#prefix'] = '<div class="media-left avatar">';
        $build['members']['#suffix'] = '</div>';
        // Add members name.
        $build['membernames']['#markup'] = $display_name;
        $build['membernames']['#prefix'] = '<strong>';
        $build['membernames']['#suffix'] = '</strong>';
      }
    }
    elseif ($build['#view_mode'] === 'full') {
      $build['#prefix'] = '';
      $build['#suffix'] = '';
    }
  }

  // Private message entity.
  if ($entity->getEntityTypeId() === 'private_message') {
    // View mode inbox.
    if ($build['#view_mode'] === 'inbox') {
      // Remove prefix and suffix.
      $build['#prefix'] = '';
      $build['#suffix'] = '';
    }
    elseif ($build['#view_mode'] === 'full') {
      /* @var \Drupal\private_message\Entity\PrivateMessage $entity */
      if (Drupal::currentUser()->id() === $entity->getOwnerId()) {
        // @TODO mark the message as my message.
        $build['#prefix'] .= '<div class="message__by-me">';
        $build['#suffix'] .= '</div>';
      }
    }
  }
}

/**
 * Implements hook_thread_view_alter().
 */
function social_private_message_thread_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($display->getComponent('delete_link')) {
    $url = Url::fromRoute('entity.private_message_thread.delete_form', ['private_message_thread' => $entity->id()]);
    $build['delete_link'] = [
      '#prefix' => '',
      '#suffix' => '',
      '#type' => 'link',
      '#url' => $url,
      '#title' => t('Delete thread'),
    ];
  }
  // Also add the back to inbox link, but just the link since it's a dropdown with icon.
  $build['back_to_inbox']['#markup'] = Url::fromRoute('social_private_message.inbox')->toString();
}
