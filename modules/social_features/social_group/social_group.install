<?php
/**
 * @file
 * Install, update and uninstall functions for the social_group module.
 */

use \Drupal\menu_link_content\Entity\MenuLinkContent;

/**
 * Implements hook_install().
 *
 * Perform actions related to the installation of social_group.
 */
function social_group_install() {

  // Set some default permissions.
  _social_group_set_permissions();
  // Add menu items
  _social_group_create_menu_links();

  // Make sure the admin theme is not used when managing groups.
  $group_settings = \Drupal::configFactory()->getEditable('group.settings');
  $group_settings->set('use_admin_theme', FALSE);
  $group_settings->save();

  // Disable group nodes.
  $view = \Drupal::service('entity.manager')->getStorage('view')->load('group_nodes');
  if (!is_null($view)) {
    $view->setStatus(FALSE);
    $view->save();
  }
}

/**
 * Function to set permissions.
 */
function _social_group_set_permissions() {
  $roles = \Drupal\user\Entity\Role::loadMultiple();

  /** @var \Drupal\user\Entity\Role $role */
  foreach ($roles as $role) {
    if ($role->id() === 'administrator') {
      continue;
    }

    $permissions = _social_group_get_permissions($role->id());
    user_role_grant_permissions($role->id(), $permissions);
  }
}

/**
 * @param $role
 * @return array
 */
function _social_group_get_permissions($role) {
  // Anonymous.
  $permissions['anonymous'] = array(

  );

  // Authenticated.
  $permissions['authenticated'] = array_merge($permissions['anonymous'], array(
    'create open_group group'
  ));


  // Content manager.
  $permissions['contentmanager'] = array_merge($permissions['authenticated'], array(

  ));

  // Site manager.
  $permissions['sitemanager'] = array_merge($permissions['contentmanager'], array(

  ));

  return $permissions[$role];
}

/**
 * Function to create some menu items.
 */
function _social_group_create_menu_links() {
  $menu_links = MenuLinkContent::loadMultiple();
  $parent = NULL;
  /** @var MenuLinkContent $menu_link */
  foreach ($menu_links as $menu_link) {
    if ($menu_link->label() === 'Explore' && $menu_link->isExpanded()) {
      $parent = 'menu_link_content:' . $menu_link->uuid();
    }
  }

  if (!is_null($parent)) {
    MenuLinkContent::create([
      'title' => 'All groups',
      'link' => ['uri' => 'internal:/all-groups'],
      'menu_name' => 'main',
      'expanded' => FALSE,
      'weight' => 20,
      'parent' => $parent,
    ])->save();
  }
}

/**
 * Install geolocation, geocoder and grolesync module.
 */
function social_group_update_8001() {

  $modules = array(
    'geolocation',
    'geocoder',
    'grolesync',
  );
  \Drupal::service('module_installer')->install($modules);

}

/**
 * Make sure the group nodes view is disabled.
 */
function social_group_update_8002() {
  $view = \Drupal::service('entity.manager')->getStorage('view')->load('group_nodes');
  if (!is_null($view)) {
    $view->setStatus(FALSE);
    $view->save();
  }
}

/**
 * Remove geolocation fields.
 */
function social_group_update_8003() {
  $fields = entity_load_multiple_by_properties('field_storage_config', array('type' => 'geolocation'));
  foreach ($fields as $field) {
    $field->delete();
  }
}