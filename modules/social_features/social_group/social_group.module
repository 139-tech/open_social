<?php

use Drupal\Core\Render\Element;
use Drupal\Core\Form\FormStateInterface;
use Drupal\group\Entity\GroupInterface;
use Drupal\group\Entity\GroupContent;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\cache\CachePluginBase;
use Drupal\Core\Url;
use Drupal\group\Plugin\GroupContentEnabler;
use Drupal\Core\Cache\Cache;
use Drupal\image\Entity\ImageStyle;

/**
 * @file
 * The Social group module.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function social_group_form_group_open_group_add_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Add custom submit handler just for redirect purposes.
  $form['actions']['submit']['#submit'][] = '_social_group_group_open_group_edit_form_submit';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function social_group_form_group_open_group_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Add custom submit handler just for redirect purposes.
  $form['actions']['submit']['#submit'][] = '_social_group_group_open_group_edit_form_submit';
}

/**
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *
 * Form submit for group_open_group_add_form and group_open_group_edit_form.
 *
 */
function _social_group_group_open_group_edit_form_submit($form, FormStateInterface $form_state) {
  // Set redirect to the group overview page when user saves a group.
  $form_state->setRedirect(
    'view.groups.page_user_groups',
    array('user' => \Drupal::currentUser()->id(), array())
  );
}

/**
 * Prepares variables for profile templates.
 *
 * Default template: profile.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 *   - profile: The profile object.
 *   - view_mode: View mode; e.g., 'full', 'teaser', etc.
 */
function social_group_preprocess_group(&$variables) {
  $group = $variables['group'];
  $variables['joined'] = FALSE;

  $account = \Drupal::currentUser();

  // Set joined to true for teaser when current logged in
  // user is member of the group.
  if ($group->getMember($account)) {
    $variables['joined'] = TRUE;
    if ($group->hasPermission('leave group', $account)) {
      // @todo switch this to get URL from routes correctly.
      $variables['group_operations_url'] = Url::fromUserInput('/group/' . $group->id() . '/leave');
    }
  }
  elseif ($group->hasPermission('join group', $account)) {
    // @todo switch this to get URL from routes correctly.
    $variables['group_operations_url'] = Url::fromUserInput('/group/' . $group->id() . '/join');
  }

  // Add the hero styled image.
  if (!empty($group->field_group_image->entity)) {
    $variables['group_hero_styled_image_url'] = ImageStyle::load('hero_background')
      ->buildUrl($group->field_group_image->entity->getFileUri());
  }

  // Add group edit url for management.
  if ($group instanceof Drupal\group\Entity\Group) {
    if ($group->access('update', $account)) {
      $variables['group_edit_url'] = $group->toUrl('edit-form')->toString();
    }
  }
}

/**
 * Implements hook_entity_insert().
 *
 * On a new group insert, from the type open group the Owner gets the
 * group manager role by default.
 */
function social_group_group_insert(GroupInterface $group) {
  // @Todo remove this when https://www.drupal.org/node/2702743 lands and make
  // sure the settings will be implemented accordingly.
  if ($group->getGroupType()->id() == 'open_group') {
    // Get the group owner.
    $account = $group->getOwner();
    // Get membership.
    $membership = \Drupal\group\GroupMembership::load($group, $account);
    $content = $membership->getGroupContent();
    // Delete the initial created membership.
    $content->delete();

    // Create a new membership.
    $plugin = $group->getGroupType()->getContentPlugin('group_membership');
    $values = array('group_roles' => array('open_group-group_manager'));
    $group_content = GroupContent::create([
        'type' => $plugin->getContentTypeConfigId(),
        'gid' => $group->id(),
        'entity_id' => $group->getOwnerId(),
      ] + $values
    );
    $group_content->save();

  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function social_group_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $action_forms = array(
    'group_content_open_group-group_membership_group-join_form',
    'group_content_open_group-group_membership_group-leave_form',
    'group_content_open_group-group_membership_add_form'
  );

  // Perform alterations on joining / leaving groups.
  if (in_array($form_id, $action_forms)) {

    // Add cancel option on join and leave form.
    $form['actions']['cancel'] = array(
      '#type' => 'submit',
      '#value' => t('Cancel'),
      '#submit' => array('_social_group_cancel_join_leave_form'),
      '#limit_validation_errors' => array(),
    );

    $form['actions']['submit']['#submit'][] = '_social_group_action_form_submit';

    // Change titles
    if ($form_id === 'group_content_open_group-group_membership_add_form') {
      $form['entity_id']['widget'][0]['target_id']['#title'] = t('Select a member');
      $form['group_roles']['widget']['#title'] = t('Group roles');
    }
  }

  $content_forms = array(
    'group_content_open_group-group_node-topic_gnode-form_form',
    'group_content_open_group-group_node-event_gnode-form_form',
  );
  // Check if form is group content create form.
  // @TODO: Remove or fix checking of second step when group module changes.
  if (in_array($form_id, $content_forms) && $form['actions']['submit']['#value'] == 'Create node in group') {
    // Add custom submit handler just for redirect purposes. We don't want to
    // override the form::save in group.
    $form['actions']['submit']['#submit'][] = '_social_group_node_form_submit';
  }
}

/**
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *
 * Form submit for group join / leave form.
 *
 */
function _social_group_action_form_submit($form, FormStateInterface $form_state) {
  $group = \Drupal::routeMatch()->getParameter('group');

  if (!is_object($group) && !is_null($group)) {
    $group = \Drupal::service('entity_type.manager')
      ->getStorage('group')
      ->load($group);
  }

  // Invalidate cache tags.
  $cache_tags = array(
    'group_membership:' . $group->id(),
    'group_view'
  );
  foreach ($cache_tags as $cache_tag) {
    Cache::invalidateTags(array($cache_tag));
  }

  // Get form that was submitted.
  $complete_form = $form_state->getCompleteForm();

  if ($complete_form['#form_id'] == 'group_content_open_group-group_membership_group-join_form') {
    // Set redirect to group home page.
    $form_state->setRedirect(
      'entity.group.canonical',
      array('group' => $group->id(), array())
    );
  }
  else {
    // Set redirect to the Group overview page when a user saves their profile.
    $form_state->setRedirect(
      'view.groups.page_user_groups',
      array('user' =>\Drupal::currentUser()->id(), array())
    );
  }
}

/**
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *
 * Form cancel for join and leave form.
 *
 */
function _social_group_cancel_join_leave_form($form, FormStateInterface $form_state) {
  // Get form that was submitted.
  $group = \Drupal::routeMatch()->getParameter('group');

  if (!is_object($group) && !is_null($group)) {
    $group = \Drupal::service('entity_type.manager')
      ->getStorage('group')
      ->load($group);
  }

  // Set redirect only for cancel buttons. Just go back to the group page.
  $form_state->setRedirect(
    'entity.group.canonical',
    array('group' => $group->id(), array())
  );
}

/**
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *
 * Form submit for group content create form.
 *
 */
function _social_group_node_form_submit($form, FormStateInterface $form_state) {
  // Set redirect after group content creation to the default node '/node/%nid'
  // not to the group node.
  $route_params = $form_state->getRedirect()->getRouteParameters();
  if (!empty($route_params['group_content'])) {
    // Get node reference.
    $group_content = \Drupal::entityTypeManager()
      ->getStorage('group_content')
      ->load($route_params['group_content']);
    $node_reference = reset($group_content->get('entity_id')->getValue());
    // Set redirect.
    $form_state->setRedirect(
      'entity.node.canonical',
      array('node' => $node_reference['target_id'], array())
    );
  }
}


/**
 * Implements hook_views_post_render().
 *
 * Alter "Group Members" views. Replace user IDs with profile teasers.
 */
function social_group_views_post_render(ViewExecutable $view, &$output, CachePluginBase $cache) {
  if ($view->id() == 'group_members') {
    foreach ($output['#rows'][0]['#rows'] as $key => $row) {
      // Get Group membership content entity.
      $group_content = $row['#group_content'];
      // Get User entity.
      $user_entity = $group_content->getEntity();
      if (!empty($user_entity)) {
        // Get Profile storage.
        $storage = \Drupal::entityTypeManager()->getStorage('profile');
        if (!empty($storage)) {
          // Get Profile entity.
          $user_profile = $storage->loadByUser($user_entity, 'profile');
          if ($user_profile) {
            // Use teaser for page and small_teaser for block.
            $view_mode = ($view->current_display === 'block_newest_members') ? 'small_teaser' : 'teaser';
            // Replace output with profile teaser.
            $output['#rows'][0]['#rows'][$key] = \Drupal::entityTypeManager()
              ->getViewBuilder('profile')
              ->view($user_profile, $view_mode);
          }
          else {
            // Remove output if user don't have profile (admin).
            unset($output['#rows'][0]['#rows'][$key]);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function social_group_menu_local_tasks_alter(&$data, $route_name) {
  // Hide default Group "Members" tab, because we add our own tab.
  if (isset($data['tabs'][0]['group.members'])){
    unset($data['tabs'][0]['group.members']);
  }
}

/**
 * Implements hook_local_tasks_alter().
 */
function social_group_local_tasks_alter(&$local_tasks) {
  // Remove local delete task from group page.
  unset($local_tasks['group.delete_form']);
}
