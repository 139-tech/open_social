<?php

use Drupal\Core\Render\Element;
use Drupal\Core\Form\FormStateInterface;
use Drupal\group\Entity\GroupInterface;
use Drupal\group\Entity\GroupContent;

/**
 * @file
 * The Social group module.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function social_group_form_group_open_group_add_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Add custom submit handler just for redirect purposes.
  $form['actions']['submit']['#submit'][] = '_social_group_group_open_group_edit_form_submit';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function social_group_form_group_open_group_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Add custom submit handler just for redirect purposes.
  $form['actions']['submit']['#submit'][] = '_social_group_group_open_group_edit_form_submit';
}

/**
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *
 * Form submit for group_open_group_add_form and group_open_group_edit_form.
 *
 */
function _social_group_group_open_group_edit_form_submit($form, FormStateInterface $form_state) {
  // Set redirect to the group overview page when user saves a group.
  $form_state->setRedirect(
    'view.groups.user_groups',
    array('user' =>\Drupal::currentUser()->id(), array())
  );
}

/**
 * Prepares variables for profile templates.
 *
 * Default template: profile.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 *   - profile: The profile object.
 *   - view_mode: View mode; e.g., 'full', 'teaser', etc.
 */
function social_group_preprocess_group(&$variables) {
  $group = $variables['group'];
  $variables['joined'] = FALSE;

  // Set joined to true for teaser when current logged in
  // user is member of the group.
  if ($group->getMember($variables['user'])) {
    $variables['joined'] = TRUE;
  }

  // See social_user_user_format_name_alter(), DisplayName is either first name
  // + last name, or username if both first and last name aren't filled out.
  $variables['profile_name'] = $user->getDisplayName();;
  $variables['profile_contact_url'] = Url::fromUserInput('/user/' . $profile->getOwnerId() . '/information');
  $variables['profile_stream_url'] = Url::fromUserInput('/user/' . $profile->getOwnerId() . '/stream');
  $variables['user_mail'] = $user->getEmail();

  // Edit profile URL
  $account = \Drupal::currentUser();
  if ($profile->access('edit', $account)) {
    $variables['profile_edit_url'] = Url::fromUserInput('/user/' . $profile->getOwnerId() . '/profile');
  }
}

/**
 * Implements hook_entity_insert().
 *
 * On a new group insert, from the type open group the Owner gets the
 * group manager role by default.
 */
function social_group_group_insert(GroupInterface $group) {
  // @Todo remove this when https://www.drupal.org/node/2702743 lands and make
  // sure the settings will be implemented accordingly.
  if ($group->getGroupType()->id() == 'open_group') {
    $plugin = $group->getGroupType()->getContentPlugin('group_membership');
    $values = array('group_roles' => array('open_group-group_manager'));
    $group_content = GroupContent::create([
        'type' => $plugin->getContentTypeConfigId(),
        'gid' => $group->id(),
        'entity_id' => $group->getOwnerId(),
      ] + $values);
    $group_content->save();
  }
}