<?php

/**
 * @file
 * Primary module hooks for social_group_request module.
 */

use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
use Drupal\Core\Url;
use Drupal\group\Entity\GroupInterface;
use Drupal\social_group_request\Plugin\GroupContentEnabler\GroupMembershipRequest;
use Drupal\group\Entity\GroupContentInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function social_group_request_group_content_insert(GroupContentInterface $group_content) {
  $type = $group_content->getContentPlugin()->getPluginId();
  $membership_request_enabled = $group_content->getGroup()->getGroupType()->hasContentPlugin('group_membership_request');

  // If new membership is created, check related membership request exists.
  if ($type === 'group_membership' && $membership_request_enabled) {
    $approver = \Drupal::currentUser()->id();
    $storage = \Drupal::entityTypeManager()->getStorage('group_content');
    $filters = [
      'entity_id' => $group_content->getEntity()->id(),
      'grequest_status' => GroupMembershipRequest::REQUEST_PENDING,
    ];
    $requests = $storage->loadByGroup($group_content->getGroup(), 'group_membership_request', $filters);

    /** @var \Drupal\group\Entity\GroupContentInterface $request */
    foreach ($requests as $request) {
      $request
        ->set('grequest_status', GroupMembershipRequest::REQUEST_ACCEPTED)
        ->set('grequest_updated_by', $approver)
        ->save();

      _activity_basics_entity_action($request, 'change_status_group_membership_request_entity_action');
    }
  }
}

/**
 * Implements hook_preprocess_group().
 */
function social_group_request_preprocess_group__hero(&$variables) {
  /** @var \Drupal\group\Entity\GroupInterface $group */
  $group = $variables['group'];
  $account = \Drupal::currentUser();

  if ($group->getGroupType()->id() !== 'closed_group') {
    return;
  }

  if (
    !$group->hasPermission('request group membership', $account) ||
    !$group->hasField('field_group_allow_request')
  ) {
    $variables['allow_request'] = FALSE;
    return;
  }

  $allow_request = $group->get('field_group_allow_request');
  if ($allow_request->isEmpty() || $allow_request->value == 0) {
    $variables['allow_request'] = FALSE;
    return;
  }

  if ($group->getMember($account)) {
    return;
  }

  $variables['allow_request'] = TRUE;
  $variables['group_operations_url'] = Url::fromRoute('social_group_request.request_membership', ['group' => $group->id()]);

  $contentTypeConfigId = $group
    ->getGroupType()
    ->getContentPlugin('group_membership_request')
    ->getContentTypeConfigId();

  $request = \Drupal::entityQuery('group_content')
    ->condition('type', $contentTypeConfigId)
    ->condition('gid', $group->id())
    ->condition('entity_id', $account->id())
    ->condition('grequest_status', GroupMembershipRequest::REQUEST_PENDING)
    ->count()
    ->execute();

  if ($request > 0) {
    $variables['requested'] = TRUE;
    $variables['group_operations_url'] = Url::fromRoute('social_group_request.cancel_request', ['group' => $group->id()]);
  }

  $variables['#cache']['tags'][] = 'request-membership:' . $group->id();
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function social_group_request_menu_local_tasks_alter(&$data, $route_name, RefinableCacheableDependencyInterface &$cacheability) {
  $group = _social_group_get_current_group();

  // Must be a group, otherwise we don't do anything.
  if ($group instanceof GroupInterface && isset($data['tabs'][0]['social_group_request.pending_members'])) {
    $pending_members_tab = &$data['tabs'][0]['social_group_request.pending_members'];

    if ($group->getGroupType()->id() === 'closed_group') {
      $contentTypeConfigId = $group
        ->getGroupType()
        ->getContentPlugin('group_membership_request')
        ->getContentTypeConfigId();

      $requests = \Drupal::entityQuery('group_content')
        ->condition('type', $contentTypeConfigId)
        ->condition('gid', $group->id())
        ->condition('grequest_status', GroupMembershipRequest::REQUEST_PENDING)
        ->count()
        ->execute();

      $pending_members_tab['#link']['title'] = sprintf('%s (%s)', $pending_members_tab['#link']['title'], $requests);

      $cacheability->addCacheTags(['request-membership:' . $group->id()]);
    }
    else {
      // Hide tab if the group type is not closed group.
      $pending_members_tab['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_activity_send_email_notifications_alter().
 */
function social_group_request_activity_send_email_notifications_alter(array &$items, array $email_message_templates) {
  if (isset($email_message_templates['request_to_join_a_group'])) {
    $items['what_manage']['templates'][] = 'request_to_join_a_group';
  }

  if (isset($email_message_templates['approve_request_join_group'])) {
    $items['message_to_me']['templates'][] = 'approve_request_join_group';
  }
}

/**
 * Implements hook_form_alter().
 */
function social_group_request_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $route = \Drupal::routeMatch()->getRouteName();

  if (
    $form_id === 'group_content_closed_group-group_membership_add_form' &&
    $route === 'social_group_request.group_request_membership_approve'
  ) {
    if (isset($form['entity_id']['widget'][0]['target_id'])) {
      $form['entity_id']['widget'][0]['target_id']['#access'] = FALSE;
    }

    if (isset($form['group_roles']['widget'])) {
      $form['group_roles']['widget']['#title'] = t('Group role');
    }

    $user_name = $form['entity_id']['widget'][0]['target_id']['#default_value']->getDisplayName();
    $form['question'] = [
      '#type' => 'html_tag',
      '#tag' => 'p',
      '#value' => t('Are you sure to approve the membership request for the @name?', ['@name' => $user_name]),
      '#weight' => 1,
    ];

    $form['actions']['submit']['#value'] = t('Yes');
  }

  if ($form_id === 'group_closed_group_edit_form') {
    $form['field_group_allow_request']['widget']['value']['#states'] = [
      'visible' => [
        ':input[name="group_type"]' => ['value' => 'closed_group'],
      ],
    ];
  }
}

/**
 * Implements hook_fixed_tabs_alter().
 */
function social_group_request_fixed_tabs_alter(array &$fixed_tabs) {
  if ($group = _social_group_get_current_group()) {
    if ($group->getGroupType()->id() !== 'closed_group') {
      $fixed_tabs[] = 'requests';
    }
  }
}

/**
 * Implements hook_preprocess_activity().
 */
function social_group_request_preprocess_activity(array &$variables) {
  /** @var \Drupal\activity_creator\ActivityInterface $activity */
  $activity = $variables['elements']['#activity'];

  if (!$activity->get('field_activity_message')->isEmpty()) {
    /** @var \Drupal\message\MessageInterface $message */
    $message = $activity->field_activity_message->entity;

    if (!$message->get('template')->isEmpty()) {
      $message_template = $message->template->target_id;

      if ($message_template === 'request_to_join_a_group') {
        $activity_entity = $activity->getRelatedEntity();

        if ($activity_entity instanceof GroupContentInterface) {
          $variables['full_url'] = Url::fromRoute('view.group_pending_members.pending_members', [
            'group' => $activity_entity->getGroup()->id(),
          ]);
        }
      }

      if ($message_template === 'approve_request_join_group') {
        $activity_entity = $activity->getRelatedEntity();

        if ($activity_entity instanceof GroupContentInterface) {
          $variables['full_url'] = Url::fromRoute('social_group.stream', [
            'group' => $activity_entity->getGroup()->id(),
          ]);
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_page_title().
 */
function social_group_request_preprocess_page_title(&$variables) {
  if (\Drupal::routeMatch()->getRouteName() === 'view.group_pending_members.pending_members') {
    $group = _social_group_get_current_group();

    if ($group instanceof GroupInterface && $group->getGroupType()->id() === 'closed_group') {
      $contentTypeConfigId = $group
        ->getGroupType()
        ->getContentPlugin('group_membership_request')
        ->getContentTypeConfigId();

      $requests = \Drupal::entityQuery('group_content')
        ->condition('type', $contentTypeConfigId)
        ->condition('gid', $group->id())
        ->condition('grequest_status', GroupMembershipRequest::REQUEST_PENDING)
        ->count()
        ->execute();

      $variables['title'] = t('Requests (@count)', ['@count' => $requests]);

      $variables['#cache']['tags'][] = 'request-membership:' . $group->id();
    }

  }
}
