<?php

/**
 * @file
 * The Social search module.
 */

use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\search_api\Entity\Index;
use Drupal\search_api\Plugin\search_api\datasource\ContentEntity;

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Enhance the Views exposed filter blocks forms.
 */
function social_search_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $filter_forms = [
    'views-exposed-form-search-content-page',
    'views-exposed-form-search-users-page',
  ];

  if (in_array($form['#id'], $filter_forms)) {
    // Set current path as form action, in order to keep search input.
    $form['#action'] = \Drupal::service('path.current')->getPath();
    // Always enable the reset button.
    $form['actions']['reset']['#access'] = TRUE;

    if ($form['#id'] == 'views-exposed-form-search-users-page') {
      foreach ($form as &$element) {
        if (is_array($element) && isset($element['#type']) && $element['#type'] == 'entity_autocomplete') {
          $element['#selection_settings']['hide_id'] = TRUE;
        }
      }
    }
  }
}

/**
 * Implements hook_block_view_BASE_BLOCK_ID_alter().
 *
 * Enhance the Views exposed filter blocks.
 */
function social_search_block_view_views_exposed_filter_block_alter(array &$build, BlockPluginInterface $block) {
  $filter_blocks = [
    'search_content-page',
    'search_users-page',
  ];

  if (in_array($build['#derivative_plugin_id'], $filter_blocks)) {
    // Disable cache for exposed filter block to get correct current path,
    // which is used in $form['#action'].
    $build['#cache'] = [
      'max-age' => 0,
    ];
  }
}

/**
 * Implements hook_block_view_BASE_BLOCK_ID_alter().
 *
 * Make the label/title translatable.
 */
function social_block_view_search_hero_block_alter(array &$build, BlockPluginInterface $block) {
  $build['#configuration']['label'] = t('Search');
}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * Update the profile index when user is updated or delete entry when blocked.
 */
function social_search_user_update(EntityInterface $entity) {
  if ($entity->getEntityTypeId() === 'user') {
    $indexes = [
      'social_all',
      'social_users',
    ];
    foreach ($indexes as $index_id) {
      $index = Index::load($index_id);
      if ($index) {
        $entity_type_manager = \Drupal::entityTypeManager();
        /** @var \Drupal\profile\ProfileStorage $storage */
        $storage = $entity_type_manager->getStorage('profile');
        /** @var \Drupal\user\Entity\User $entity */
        if (!empty($storage)) {
          $profile = $storage->loadByUser($entity, 'profile');
          $profile_ids = [];
          $original_entity = $entity->original;
          foreach ($profile->getTranslationLanguages() as $langcode => $language) {
            $profile_ids[] = $profile->id() . ':' . $langcode;
          }
          $datasource_id = 'entity:profile';
          if ($entity->isBlocked() && $original_entity->isActive()) {
            $index->trackItemsDeleted($datasource_id, $profile_ids);
          }
          elseif ($entity->isActive() && $original_entity->isBlocked()) {
            $filtered_item_ids = ContentEntity::filterValidItemIds($index, $datasource_id, $profile_ids);
            $index->trackItemsInserted($datasource_id, $filtered_item_ids);
          }
          else {
            $index->trackItemsUpdated($datasource_id, $profile_ids);
          }
        }
      }
    }
  }
}
