diff --git a/group.libraries.yml b/group.libraries.yml
index b6ee160..5f3ab22 100644
--- a/group.libraries.yml
+++ b/group.libraries.yml
@@ -18,3 +18,12 @@ permissions:
   css:
     theme:
       css/permissions.css: {}
+
+views_bulk_operations.frontUi:
+  version: 1.0
+  js:
+    js/frontUi.js: {}
+  dependencies:
+    - core/drupal
+    - core/jquery
+    - core/jquery.once
diff --git a/group.module b/group.module
index 387c0cf..5f8b0ff 100644
--- a/group.module
+++ b/group.module
@@ -561,3 +561,12 @@ function _group_content_enabler_manager() {
 function _group_role_synchronizer() {
   return \Drupal::service('group_role.synchronizer');
 }
+
+/**
+ * Implements hook_views_plugins_field_alter().
+ */
+function group_views_plugins_field_alter(array &$plugins) {
+  if (\Drupal::service('module_handler')->moduleExists('views_bulk_operations')) {
+    $plugins['views_bulk_operations_bulk_form']['class'] = 'Drupal\group\Plugin\views\field\GroupViewsBulkOperationsBulkForm';
+  }
+}
diff --git a/group.services.yml b/group.services.yml
index 95b34e7..8266f19 100644
--- a/group.services.yml
+++ b/group.services.yml
@@ -71,6 +71,12 @@ services:
     tags:
       - { name: 'event_subscriber' }
 
+  group.views_bulk_operations_path.route_subscriber:
+    class: 'Drupal\group\Routing\GroupViewsBulkOperationsRouteSubscriber'
+    arguments: ['@module_handler']
+    tags:
+      - { name: 'event_subscriber' }
+
   group.group_route_context:
     class: 'Drupal\group\Context\GroupRouteContext'
     arguments: ['@current_route_match']
diff --git a/js/frontUi.js b/js/frontUi.js
new file mode 100644
index 0000000..de81d9f
--- /dev/null
+++ b/js/frontUi.js
@@ -0,0 +1,32 @@
+/**
+ * @file
+ * Select-All Button functionality.
+ */
+
+(function ($, Drupal) {
+
+  'use strict';
+
+  /**
+   * @type {Drupal~behavior}
+   */
+  Drupal.behaviors.group_views_bulk_operations = {
+    attach: function (context, settings) {
+      $('.vbo-view-form').once('group-vbo-init').each(Drupal.groupViewsBulkOperationsFrontUi);
+    }
+  };
+
+  /**
+   * Callback used in {@link Drupal.behaviors.group_views_bulk_operations}.
+   */
+  Drupal.groupViewsBulkOperationsFrontUi = function () {
+    var $vboForm = $(this);
+
+    // Add AJAX functionality to table checkboxes.
+    var $multiSelectElement = $vboForm.find('.vbo-multipage-selector').first();
+    if ($multiSelectElement.length && Drupal.viewsBulkOperationsSelection.display_id.length) {
+      Drupal.viewsBulkOperationsSelection.display_id = Drupal.viewsBulkOperationsSelection.display_id + '/' + $multiSelectElement.data('group-id');
+    }
+  };
+
+})(jQuery, Drupal);
diff --git a/src/Access/GroupViewsBulkOperationsAccessTrait.php b/src/Access/GroupViewsBulkOperationsAccessTrait.php
new file mode 100644
index 0000000..0eebfaf
--- /dev/null
+++ b/src/Access/GroupViewsBulkOperationsAccessTrait.php
@@ -0,0 +1,40 @@
+<?php
+
+namespace Drupal\group\Access;
+
+use Drupal\group\Plugin\views\access\GroupPermission;
+use Drupal\views\DisplayPluginCollection;
+use Drupal\views\ViewExecutable;
+use Drupal\views\Views;
+
+/**
+ * Defines common method for Views Bulk Operations access.
+ */
+trait GroupViewsBulkOperationsAccessTrait {
+
+  /**
+   * Check if View display based on group permission.
+   *
+   * @param \Drupal\views\ViewExecutable $view
+   *   The view.
+   * @param $display_id
+   *   The display ID.
+   *
+   * @return bool
+   *   TRUE if group permission is used.
+   */
+  public function useGroupPermission(ViewExecutable $view, $display_id) {
+    $display_handlers = new DisplayPluginCollection($view, Views::pluginManager('display'));
+
+    if ($display_handlers->has($display_id)) {
+      $plugin = $display_handlers->get($display_id)->getPlugin('access');
+
+      if ($plugin instanceof GroupPermission) {
+        return TRUE;
+      }
+    }
+
+    return FALSE;
+  }
+
+}
diff --git a/src/Context/GroupRouteContextTrait.php b/src/Context/GroupRouteContextTrait.php
index 53a6ac9..08983cc 100644
--- a/src/Context/GroupRouteContextTrait.php
+++ b/src/Context/GroupRouteContextTrait.php
@@ -50,8 +50,14 @@ trait GroupRouteContextTrait {
     $route_match = $this->getCurrentRouteMatch();
     
     // See if the route has a group parameter and try to retrieve it.
-    if (($group = $route_match->getParameter('group')) && $group instanceof GroupInterface) {
-      return $group;
+    if ($group = $route_match->getParameter('group')) {
+      if (is_numeric($group)) {
+        $group = Group::load($group);
+      }
+
+      if ($group instanceof GroupInterface) {
+        return $group;
+      }
     }
     // Create a new group to use as context if on the group add form.
     elseif ($route_match->getRouteName() == 'entity.group.add_form') {
diff --git a/src/Form/GroupViewsBulkOperationsConfigureAction.php b/src/Form/GroupViewsBulkOperationsConfigureAction.php
new file mode 100644
index 0000000..2dfdf58
--- /dev/null
+++ b/src/Form/GroupViewsBulkOperationsConfigureAction.php
@@ -0,0 +1,40 @@
+<?php
+
+namespace Drupal\group\Form;
+
+use Drupal\Core\Form\FormStateInterface;
+use Drupal\group\Access\GroupViewsBulkOperationsAccessTrait;
+use Drupal\views\Views;
+use Drupal\views_bulk_operations\Form\ConfigureAction;
+
+/**
+ * Action configuration form.
+ */
+class GroupViewsBulkOperationsConfigureAction extends ConfigureAction {
+
+  use GroupViewsBulkOperationsAccessTrait;
+
+  /**
+   * {@inheritdoc}
+   */
+  public function submitForm(array &$form, FormStateInterface $form_state) {
+    parent::submitForm($form, $form_state);
+
+    $form_data = $form_state->get('views_bulk_operations');
+    $definition = $this->actionManager->getDefinition($form_data['action_id']);
+
+    if (!empty($definition['confirm_form_route_name'])) {
+      /** @var \Drupal\Core\Url $url */
+      $url = $form_state->getRedirect();
+
+      $parameters = $url->getRouteParameters();
+      $view = Views::getView($parameters['view_id']);
+
+      if ($view && $this->useGroupPermission($view, $parameters['display_id'])) {
+        $url->setRouteParameter('group', $this->getRouteMatch()->getRawParameter('group'));
+        $form_state->setRedirectUrl($url);
+      }
+    }
+  }
+
+}
diff --git a/src/Plugin/views/field/GroupViewsBulkOperationsBulkForm.php b/src/Plugin/views/field/GroupViewsBulkOperationsBulkForm.php
new file mode 100644
index 0000000..99a9e5a
--- /dev/null
+++ b/src/Plugin/views/field/GroupViewsBulkOperationsBulkForm.php
@@ -0,0 +1,148 @@
+<?php
+
+namespace Drupal\group\Plugin\views\field;
+
+use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Routing\RouteMatchInterface;
+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\Url;
+use Drupal\group\Access\GroupViewsBulkOperationsAccessTrait;
+use Drupal\user\PrivateTempStoreFactory;
+use Drupal\views_bulk_operations\Plugin\views\field\ViewsBulkOperationsBulkForm;
+use Drupal\views_bulk_operations\Service\ViewsBulkOperationsActionManager;
+use Drupal\views_bulk_operations\Service\ViewsBulkOperationsActionProcessorInterface;
+use Drupal\views_bulk_operations\Service\ViewsBulkOperationsViewDataInterface;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+use Symfony\Component\HttpFoundation\RequestStack;
+
+/**
+ * Defines the Views Bulk Operations field plugin.
+ */
+class GroupViewsBulkOperationsBulkForm extends ViewsBulkOperationsBulkForm {
+
+  use GroupViewsBulkOperationsAccessTrait;
+
+  /**
+   * The currently active route match object.
+   *
+   * @var \Drupal\Core\Routing\RouteMatchInterface
+   */
+  protected $routeMatch;
+
+  /**
+   * Constructs a new GroupViewsBulkOperationsBulkForm object.
+   *
+   * @param array $configuration
+   *   A configuration array containing information about the plugin instance.
+   * @param string $plugin_id
+   *   The plugin ID for the plugin instance.
+   * @param mixed $plugin_definition
+   *   The plugin implementation definition.
+   * @param \Drupal\views_bulk_operations\Service\ViewsbulkOperationsViewDataInterface $viewData
+   *   The VBO View Data provider service.
+   * @param \Drupal\views_bulk_operations\Service\ViewsBulkOperationsActionManager $actionManager
+   *   Extended action manager object.
+   * @param \Drupal\views_bulk_operations\Service\ViewsBulkOperationsActionProcessorInterface $actionProcessor
+   *   Views Bulk Operations action processor.
+   * @param \Drupal\user\PrivateTempStoreFactory $tempStoreFactory
+   *   User private temporary storage factory.
+   * @param \Drupal\Core\Session\AccountInterface $currentUser
+   *   The current user object.
+   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   *   The request stack.
+   * @param \Drupal\Core\Routing\RouteMatchInterface $routeMatch
+   *   The currently active route match object.
+   */
+  public function __construct(
+    array $configuration,
+    $plugin_id,
+    $plugin_definition,
+    ViewsBulkOperationsViewDataInterface $viewData,
+    ViewsBulkOperationsActionManager $actionManager,
+    ViewsBulkOperationsActionProcessorInterface $actionProcessor,
+    PrivateTempStoreFactory $tempStoreFactory,
+    AccountInterface $currentUser,
+    RequestStack $requestStack,
+    RouteMatchInterface $routeMatch
+  ) {
+    parent::__construct($configuration, $plugin_id, $plugin_definition, $viewData, $actionManager, $actionProcessor, $tempStoreFactory, $currentUser, $requestStack);
+
+    $this->routeMatch = $routeMatch;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
+    return new static(
+      $configuration,
+      $plugin_id,
+      $plugin_definition,
+      $container->get('views_bulk_operations.data'),
+      $container->get('plugin.manager.views_bulk_operations_action'),
+      $container->get('views_bulk_operations.processor'),
+      $container->get('user.private_tempstore'),
+      $container->get('current_user'),
+      $container->get('request_stack'),
+      $container->get('current_route_match')
+    );
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function viewsForm(array &$form, FormStateInterface $form_state) {
+    parent::viewsForm($form, $form_state);
+
+    $wrapper = &$form['header'][$this->options['id']];
+
+    if (isset($wrapper['multipage'])) {
+      $form['#attached']['library'][] = 'group/views_bulk_operations.frontUi';
+
+      $group = $this->routeMatch->getRawParameter('group');
+
+      if ($group) {
+        $wrapper['multipage']['#attributes']['data-group-id'] = $group;
+      }
+    }
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function viewsFormSubmit(array &$form, FormStateInterface $form_state) {
+    parent::viewsFormSubmit($form, $form_state);
+
+    $redirect = $form_state->getRedirect();
+
+    if (!($redirect instanceof Url)) {
+      return;
+    }
+
+    $current_parameters = $this->routeMatch->getParameters()->all();
+    $redirect_parameters = $redirect->getRouteParameters();
+
+    $required_parameters = [
+      'view_id',
+      'display_id',
+    ];
+
+    $valid = TRUE;
+
+    foreach ($required_parameters as $key) {
+      if (!(isset($redirect_parameters[$key]) && isset($current_parameters[$key]) && $redirect_parameters[$key] === $current_parameters[$key])) {
+        $valid = FALSE;
+        break;
+      }
+    }
+
+    if ($valid && isset($current_parameters['group']) && $this->useGroupPermission($this->view, $redirect_parameters['display_id'])) {
+      /** @var \Drupal\group\Entity\GroupInterface $entity */
+      $entity = $current_parameters['group'];
+
+      $redirect->setRouteParameter('group', $entity->id());
+      $form_state->setRedirectUrl($redirect);
+    }
+  }
+
+}
diff --git a/src/Routing/GroupViewsBulkOperationsRouteSubscriber.php b/src/Routing/GroupViewsBulkOperationsRouteSubscriber.php
new file mode 100644
index 0000000..569d8a9
--- /dev/null
+++ b/src/Routing/GroupViewsBulkOperationsRouteSubscriber.php
@@ -0,0 +1,54 @@
+<?php
+
+namespace Drupal\group\Routing;
+
+use Drupal\Core\Extension\ModuleHandlerInterface;
+use Drupal\Core\Routing\RouteSubscriberBase;
+use Symfony\Component\Routing\RouteCollection;
+
+/**
+ * Sets the _admin_route for specific group-related routes.
+ */
+class GroupViewsBulkOperationsRouteSubscriber extends RouteSubscriberBase {
+
+  /**
+   * The module handler.
+   *
+   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   */
+  protected $moduleHandler;
+
+  /**
+   * GroupViewsBulkOperationsRouteSubscriber constructor.
+   *
+   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   *   The module handler.
+   */
+  public function __construct(ModuleHandlerInterface $module_handler) {
+    $this->moduleHandler = $module_handler;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function alterRoutes(RouteCollection $collection) {
+    if ($this->moduleHandler->moduleExists('views_bulk_operations')) {
+      $route_names = [
+        'views_bulk_operations.confirm',
+        'views_bulk_operations.execute_configurable',
+        'views_bulk_operations.update_selection',
+      ];
+
+      foreach ($route_names as $route_name) {
+        $route = $collection->get($route_name);
+        $route->setPath($route->getPath() . '/{group}');
+        $route->setDefault('group', NULL);
+
+        if ($route_name === 'views_bulk_operations.execute_configurable') {
+          $route->setDefault('_form', '\Drupal\group\Form\GroupViewsBulkOperationsConfigureAction');
+        }
+      }
+    }
+  }
+
+}
