<?php

use Drupal\Core\Render\Element;
use Drupal\Core\Form\FormStateInterface;
use Drupal\group\Entity\GroupInterface;
use Drupal\group\Entity\GroupContent;
use Drupal\Core\Url;

/**
 * @file
 * The Social group module.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function social_group_form_group_open_group_add_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Add custom submit handler just for redirect purposes.
  $form['actions']['submit']['#submit'][] = '_social_group_group_open_group_edit_form_submit';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function social_group_form_group_open_group_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Add custom submit handler just for redirect purposes.
  $form['actions']['submit']['#submit'][] = '_social_group_group_open_group_edit_form_submit';
}

/**
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *
 * Form submit for group_open_group_add_form and group_open_group_edit_form.
 *
 */
function _social_group_group_open_group_edit_form_submit($form, FormStateInterface $form_state) {
  // Set redirect to the group overview page when user saves a group.
  $form_state->setRedirect(
    'view.groups.user_groups',
    array('user' => \Drupal::currentUser()->id(), array())
  );
}

/**
 * Prepares variables for profile templates.
 *
 * Default template: profile.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 *   - profile: The profile object.
 *   - view_mode: View mode; e.g., 'full', 'teaser', etc.
 */
function social_group_preprocess_group(&$variables) {
  $group = $variables['group'];
  $variables['joined'] = FALSE;

  // Set joined to true for teaser when current logged in
  // user is member of the group.
  if ($group->getMember($variables['user'])) {
    $variables['joined'] = TRUE;
  }
}


/**
 * Implements hook_entity_insert().
 *
 * On a new group insert, from the type open group the Owner gets the
 * group manager role by default.
 */
function social_group_group_insert(GroupInterface $group) {
  // @Todo remove this when https://www.drupal.org/node/2702743 lands and make
  // sure the settings will be implemented accordingly.
  if ($group->getGroupType()->id() == 'open_group') {
    // Get the group owner.
    $account = $group->getOwner();
    // Get membership.
    $membership = \Drupal\group\GroupMembership::load($group, $account);
    $content = $membership->getGroupContent();
    // Delete the initial created membership.
    $content->delete();

    // Create a new membership.
    $plugin = $group->getGroupType()->getContentPlugin('group_membership');
    $values = array('group_roles' => array('open_group-group_manager'));
    $group_content = GroupContent::create([
        'type' => $plugin->getContentTypeConfigId(),
        'gid' => $group->id(),
        'entity_id' => $group->getOwnerId(),
      ] + $values
    );
    $group_content->save();

  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function social_group_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $content_forms = array(
    'group_content_open_group-group_node-topic_gnode-form_form',
    'group_content_open_group-group_node-event_gnode-form_form',
  );
  // Check if form is group content create form.
  // @TODO: Remove or fix checking of second step when group module changes.
  if (in_array($form_id, $content_forms) && $form['actions']['submit']['#value'] == 'Create node in group') {
    // Add custom submit handler just for redirect purposes. We don't want to
    // override the form::save in group.
    $form['actions']['submit']['#submit'][] = '_social_group_node_form_submit';
  }
}

/**
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *
 * Form submit for group content create form.
 *
 */
function _social_group_node_form_submit($form, FormStateInterface $form_state) {
  // Set redirect after group content creation to the default node '/node/%nid'
  // not to the group node.
  $route_params = $form_state->getRedirect()->getRouteParameters();
  if (!empty($route_params['group_content'])) {
    // Get node reference.
    $group_content = \Drupal::entityTypeManager()
      ->getStorage('group_content')
      ->load($route_params['group_content']);
    $node_reference = reset($group_content->get('entity_id')->getValue());
    // Set redirect.
    $form_state->setRedirect(
      'entity.node.canonical',
      array('node' => $node_reference['target_id'], array())
    );
  }
}
