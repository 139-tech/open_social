<?php
/**
 * Activity Creator module file.
 */

/**
 * Returns the allowed values for the activity status field.
 *
 * @return array $allowed_values
 */
function activity_creator_field_activity_status_allowed_values() {

  $allowed_values = [
    1 => 'Received',
    2 => 'Seen',
    3 => 'Read',
  ];

  return $allowed_values;
}

/**
 * Returns the allowed values for the activity destinations field.
 *
 * @return array $allowed_values
 */
function activity_creator_field_activity_destinations_allowed_values() {

  $allowed_values = [
    'stream_profile' => 'Stream (profile)',
    'stream_home' => 'Stream (home)',
    'stream_group' => 'Stream (group)',
    'stream_explore' => 'Stream (explore)',
    'notifications' => 'Notifications',
  ];

  return $allowed_values;
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function activity_creator_message_insert(\Drupal\message\Entity\Message $entity) {
  if ($entity) {
    // TODO Move all this logic to services (also in Queue).
    $mid = $entity->id();
    $message_type_id = $entity->getEntityType()->id();
    $actor = $entity->getOwner()->id();
    $context = $entity->get('field_message_context')->getValue();
    $destinations = $entity->get('field_message_destination')->getValue();
    $related_object = $entity->get('field_message_related_object')->getValue();

    $data = [
      'mid' => $mid, // message id, or maybe full ActivityLog obj? Better not!
      'message_type' => $message_type_id, // this is needed for the activityfactory
      'actor' => $actor,
      'context' => $context[0]['value'], // either group, profile, community
      'destination' => $destinations,
      'related_object' => $related_object,
      'last_uid' => 0, // last processed_uid
      'status' => NULL,
    ];

    $message_type = $entity->getType();

    $activity_create_direct = $message_type->getThirdPartySetting('activity_logger', 'activity_create_direct', NULL);

    if ($activity_create_direct) {

      $context_plugin_manager = \Drupal::service('plugin.manager.activity_context.processor');
      /** @var $plugin \Drupal\activity_creator\Plugin\ActivityContextBase */

      $plugin = $context_plugin_manager->createInstance($data['context']);
      $recipients = $plugin->getRecipients($data, $data['last_uid'], 0);
      $activity_factory = \Drupal::service('activity_creator.activity_factory');
      if (!empty($recipients)) {

        foreach ($recipients as $recipient) {
          // Create a queue item for activity creation.
          $activity_creator_data = [
            'mid' => $data['mid'],
            'message_type' => $data['message_type'],
            'actor' => $data['actor'],
            'context' => $data['context'], // Not necessary?
            'destination' => $data['destination'],
            'related_object' => $data['related_object'],
            'recipient' => $recipient,
          ];
          $activity_factory->createActivities($activity_creator_data);
        }
      }
      else {
        $activity_creator_data = [
          'mid' => $data['mid'],
          'message_type' => $data['message_type'],
          'actor' => $data['actor'],
          'context' => $data['context'], // Not necessary?
          'destination' => $data['destination'],
          'related_object' => $data['related_object'],
        ];
        $activity_factory->createActivities($activity_creator_data);
      }
    }
    else {
      $queue = \Drupal::queue('activity_creator_logger');
      $queue->createItem($data);
    }
  }
}

/**
 * Implements hook_views_data().
 */
function activity_creator_views_data() {
  $data['activity']['activity_visibility_access_filter'] = array(
    'title' => t('Activity visibility access'),
    'filter' => array(
      'title' => t('Activity visibility access'),
      'help' => t('Enable activity access control.'),
      'field' => 'field_visibility',
      'id' => 'activity_visibility_access'
    ),
  );
  $data['activity']['activity_profile_argument'] = array(
    'title' => t('Activity profile argument'),
    'argument' => array(
      'title' => t('Activity profile argument'),
      'help' => t('Activity profile context argument.'),
      'id' => 'activity_profile_argument'
    ),
  );
  $data['activity']['activity_group_argument'] = array(
    'title' => t('Activity group argument'),
    'argument' => array(
      'title' => t('Activity group argument'),
      'help' => t('Activity group context argument.'),
      'id' => 'activity_group_argument'
    ),
  );
  return $data;
}

/**
 * Implements hook_theme().
 */
function activity_creator_theme() {
  $items = [
    'activity' => [
      'render element' => 'elements',
      'file' => 'activity.page.inc',
      'template' => 'activity',
    ],
  ];
  return $items;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function activity_creator_theme_suggestions_activity(array $variables) {
  $suggestions = array();
  $activity = $variables['elements']['#activity'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'activity__' . $sanitized_view_mode;
  $suggestions[] = 'activity__' . $activity->id();
  $suggestions[] = 'activity__' . $activity->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}
