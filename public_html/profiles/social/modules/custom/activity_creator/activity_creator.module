<?php
/**
 * Activity Creator module file.
 */

/**
 * Returns the allowed values for the activity status field.
 *
 * @return array $allowed_values
 */
function activity_creator_field_activity_status_allowed_values() {

  $allowed_values = [
    1 => 'Received',
    2 => 'Seen',
    3 => 'Read',
  ];

  return $allowed_values;
}

/**
 * Returns the allowed values for the activity destinations field.
 *
 * @return array $allowed_values
 */
function activity_creator_field_activity_destinations_allowed_values() {

  $allowed_values = [
    'stream_profile' => 'Stream (profile)',
    'stream_home' => 'Stream (home)',
    'stream_group' => 'Stream (group)',
    'stream_explore' => 'Stream (explore)',
    'notifications' => 'Notifications',
  ];

  return $allowed_values;
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function activity_creator_message_insert(\Drupal\message\Entity\Message $entity) {
  if ($entity) {

    $mid = $entity->id();
    $message_type = $entity->getEntityType()->id();
    $context = $entity->get('field_context')->getValue();
    $destinations = $entity->get('field_destinations')->getValue();
    $related_object = $entity->get('field_related_object')->getValue();

    $data = [
      'mid' => $mid, // message id, or maybe full ActivityLog obj? Better not!
      'message_type' => $message_type, // this is needed for the activityfactory
      'context' => $context[0]['value'], // either group, profile, community
      'destination' => $destinations,
      'related_object' => $related_object,
      'last_uid' => 0, // last processed_uid
      'status' => NULL,
    ];
    $queue = \Drupal::queue('activity_creator_logger');
    $queue->createItem($data);

  }
}
